def buildPath(ini, ... args) {
    File finPath = new File(ini)
    for (arg in args) {
        finPath = new File(finPath, arg)
    }
    finPath
}

def ideaDir(... args) {
    buildPath("/home/roroco/Downloads/idea-IU-139.224.1/", args)
}

def outLib(... args) {
    buildPath("${buildDir}/output/lib", args)
}

//apply plugin: "idea"

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile project(":ro")
    compile 'org.json:json:20140107'
    testCompile 'junit:junit:4.11'
    testCompile files(ideaDir('lib/openapi.jar'),
            ideaDir("lib/util.jar"))
}


task roTest(type: Test) {
    testSrcDirs += files("src/test/java")
}

compileJava {
    classpath = files(
            classpath,
            ideaDir("lib/openapi.jar"),
            ideaDir("lib/idea.jar"),
            ideaDir("/lib/util.jar")
    )
}

task roJar(type: Jar, dependsOn: [buildDependents, compileJava]) {
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Created-By": "IntelliJ IDEA"
        )
    }

    archiveName = "${project.name}.jar"

    into("META-INF") {
        from "${project.rootDir}/META-INF/plugin.xml"
    }

    destinationDir = outLib()
}

task copyDepsToLib(type: Copy) {
    from configurations.runtime
    destinationDir = outLib()
}

def lib(... args) {
    buildPath "${project.name}/lib", args
}

task roZip(type: Zip, dependsOn: [roJar, copyDepsToLib]) {
    into(lib(project.name)) {
        from sourceSets.main.output
    }

    into(lib()) {
        from(outLib())
    }
    destinationDir = project.rootDir
}

//task backup(type: Copy) {
//    from "va copyTo${project.name}.zip"
//    into "${project.name}.zip.backup"
//}

task release(dependsOn: [roZip]) {
}
